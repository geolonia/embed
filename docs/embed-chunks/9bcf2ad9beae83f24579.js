(self.webpackChunk_geolonia_embed=self.webpackChunk_geolonia_embed||[]).push([[197],{6613:e=>{function t(e){if(!(this instanceof t))return new t(e);this._bbox=e||[1/0,1/0,-1/0,-1/0],this._valid=!!e}e.exports=t,t.prototype.include=function(e){return this._valid=!0,this._bbox[0]=Math.min(this._bbox[0],e[0]),this._bbox[1]=Math.min(this._bbox[1],e[1]),this._bbox[2]=Math.max(this._bbox[2],e[0]),this._bbox[3]=Math.max(this._bbox[3],e[1]),this},t.prototype.equals=function(e){var o;return o=e instanceof t?e.bbox():e,this._bbox[0]==o[0]&&this._bbox[1]==o[1]&&this._bbox[2]==o[2]&&this._bbox[3]==o[3]},t.prototype.center=function(e){return this._valid?[(this._bbox[0]+this._bbox[2])/2,(this._bbox[1]+this._bbox[3])/2]:null},t.prototype.union=function(e){var o;return this._valid=!0,o=e instanceof t?e.bbox():e,this._bbox[0]=Math.min(this._bbox[0],o[0]),this._bbox[1]=Math.min(this._bbox[1],o[1]),this._bbox[2]=Math.max(this._bbox[2],o[2]),this._bbox[3]=Math.max(this._bbox[3],o[3]),this},t.prototype.bbox=function(){return this._valid?this._bbox:null},t.prototype.contains=function(e){if(!e)return this._fastContains();if(!this._valid)return null;var t=e[0],o=e[1];return this._bbox[0]<=t&&this._bbox[1]<=o&&this._bbox[2]>=t&&this._bbox[3]>=o},t.prototype.intersect=function(e){return this._valid?(o=e instanceof t?e.bbox():e,!(this._bbox[0]>o[2]||this._bbox[2]<o[0]||this._bbox[3]<o[1]||this._bbox[1]>o[3])):null;var o},t.prototype._fastContains=function(){if(!this._valid)return new Function("return null;");var e="return "+this._bbox[0]+"<= ll[0] &&"+this._bbox[1]+"<= ll[1] &&"+this._bbox[2]+">= ll[0] &&"+this._bbox[3]+">= ll[1]";return new Function("ll",e)},t.prototype.polygon=function(){return this._valid?{type:"Polygon",coordinates:[[[this._bbox[0],this._bbox[1]],[this._bbox[2],this._bbox[1]],[this._bbox[2],this._bbox[3]],[this._bbox[0],this._bbox[3]],[this._bbox[0],this._bbox[1]]]]}:null}},7829:e=>{e.exports=function(e){return function e(t){return Array.isArray(t)&&t.length&&"number"==typeof t[0]?[t]:t.reduce((function(t,o){return Array.isArray(o)&&Array.isArray(o[0])?t.concat(e(o)):(t.push(o),t)}),[])}(e)}},4506:(e,t,o)=>{var r=o(9340),n=o(11),i=o(7829);e.exports=function(e){if(!e)return[];var t=n(r(e)),o=[];return t.features.forEach((function(e){e.geometry&&(o=o.concat(i(e.geometry.coordinates)))})),o}},9319:(e,t,o)=>{var r=o(4506),n=o(3692),i=o(6613),s={features:["FeatureCollection"],coordinates:["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"],geometry:["Feature"],geometries:["GeometryCollection"]},l=Object.keys(s);function a(e){for(var t=i(),o=r(e),n=0;n<o.length;n++)t.include(o[n]);return t}e.exports=function(e){return a(e).bbox()},e.exports.polygon=function(e){return a(e).polygon()},e.exports.bboxify=function(e){return n(e).map((function(e){e&&l.some((function(t){return!!e[t]&&-1!==s[t].indexOf(e.type)}))&&(e.bbox=a(e).bbox(),this.update(e))}))}},9340:e=>{e.exports=function(e){if(!e||!e.type)return null;var o=t[e.type];return o?"geometry"===o?{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:e}]}:"feature"===o?{type:"FeatureCollection",features:[e]}:"featurecollection"===o?e:void 0:null};var t={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"}},8714:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>d}),o(7327),o(2526),o(1817),o(9070),o(7941),o(5003),o(9554),o(4747),o(9337),o(3321);var r=o(2739),n=o.n(r),i=o(9319),s=o.n(i),l=o(1235),a=o(8007),u=o.n(a);function c(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function p(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function f(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y="#000000",b="#FFFFFF",h="rgba(255, 0, 0, 0.4)",g="#FFFFFF";const d=function(){function e(t,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.json=t,this.options=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?c(Object(o),!0).forEach((function(t){p(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}({cluster:!0,heatmap:!1,clusterColor:"#ff0000"},o)}var t,o;return t=e,(o=[{key:"addTo",value:function(e){var t=this.json.features,o=t.filter((function(e){return"point"!==e.geometry.type.toLowerCase()})),r=t.filter((function(e){return"point"===e.geometry.type.toLowerCase()}));e.addSource("geolonia-simple-style",{type:"geojson",data:{type:"FeatureCollection",features:o}}),this.setPolygonGeometries(e),this.setLineGeometries(e),e.addSource("geolonia-simple-style-points",{type:"geojson",data:{type:"FeatureCollection",features:r},cluster:this.options.cluster,clusterMaxZoom:14,clusterRadius:50}),e.addLayer({id:"geolonia-simple-style-polygon-symbol",type:"symbol",source:"geolonia-simple-style",filter:["==","$type","Polygon"],paint:{"text-color":["string",["get","text-color"],y],"text-halo-color":["string",["get","text-halo-color"],b],"text-halo-width":1},layout:{"text-field":["get","title"],"text-font":["Noto Sans Regular"],"text-size":12,"text-max-width":12,"text-allow-overlap":!1}}),e.addLayer({id:"geolonia-simple-style-linestring-symbol",type:"symbol",source:"geolonia-simple-style",filter:["==","$type","LineString"],paint:{"text-color":["string",["get","text-color"],y],"text-halo-color":["string",["get","text-halo-color"],b],"text-halo-width":1},layout:{"symbol-placement":"line","text-field":["get","title"],"text-font":["Noto Sans Regular"],"text-size":12,"text-max-width":12,"text-allow-overlap":!1}}),this.setPointGeometries(e),this.setCluster(e);var n=e.getContainer();if(!n.dataset||!n.dataset.lng&&!n.dataset.lat){var i=s()(this.json);e.fitBounds(i,{duration:0,padding:30})}}},{key:"setPolygonGeometries",value:function(e){e.addLayer({id:"geolonia-simple-style-polygon",type:"fill",source:"geolonia-simple-style",filter:["==","$type","Polygon"],paint:{"fill-color":["string",["get","fill"],h],"fill-opacity":["number",["get","fill-opacity"],1],"fill-outline-color":["string",["get","stroke"],g]}}),this.setPopup(e,"geolonia-simple-style-polygon")}},{key:"setLineGeometries",value:function(e){e.addLayer({id:"geolonia-simple-style-linestring",type:"line",source:"geolonia-simple-style",filter:["==","$type","LineString"],paint:{"line-width":["number",["get","stroke-width"],2],"line-color":["string",["get","stroke"],h],"line-opacity":["number",["get","stroke-opacity"],1]},layout:{"line-cap":"round","line-join":"round"}}),this.setPopup(e,"geolonia-simple-style-linestring")}},{key:"setPointGeometries",value:function(e){e.addLayer({id:"circle-simple-style-points",type:"circle",source:"geolonia-simple-style-points",filter:["!",["has","point_count"]],paint:{"circle-radius":["case",["==","small",["get","marker-size"]],7,["==","large",["get","marker-size"]],13,9],"circle-color":["string",["get","marker-color"],h],"circle-opacity":["number",["get","fill-opacity"],1],"circle-stroke-width":["number",["get","stroke-width"],1],"circle-stroke-color":["string",["get","stroke"],g],"circle-stroke-opacity":["number",["get","stroke-opacity"],1]}}),e.addLayer({id:"symbol-simple-style-points",type:"symbol",source:"geolonia-simple-style-points",filter:["!",["has","point_count"]],paint:{"text-color":["string",["get","text-color"],y],"text-halo-color":["string",["get","text-halo-color"],b],"text-halo-width":1},layout:{"icon-image":["case",["==","large",["get","marker-size"]],["image",["concat",["get","marker-symbol"],"-15"]],["image",["concat",["get","marker-symbol"],"-11"]]],"text-field":["get","title"],"text-font":["Noto Sans Regular"],"text-size":12,"text-anchor":"top","text-max-width":12,"text-offset":["case",["==","small",["get","marker-size"]],["literal",[0,.6]],["==","large",["get","marker-size"]],["literal",[0,1.2]],["literal",[0,.8]]],"text-allow-overlap":!1}}),this.setPopup(e,"circle-simple-style-points")}},{key:"setPopup",value:function(e,t){e.on("click",t,(function(t){var o=(0,l.Z)(t.features[0]).geometry.coordinates,r=t.features[0].properties.description;r&&(new(n().Popup)).setLngLat(o).setHTML(u()(r)).addTo(e)})),e.on("mouseenter",t,(function(t){t.features[0].properties.description&&(e.getCanvas().style.cursor="pointer")})),e.on("mouseleave",t,(function(){e.getCanvas().style.cursor=""}))}},{key:"setCluster",value:function(e){e.addLayer({id:"clusters",type:"circle",source:"geolonia-simple-style-points",filter:["has","point_count"],paint:{"circle-radius":20,"circle-color":this.options.clusterColor,"circle-opacity":1}}),e.addLayer({id:"cluster-count",type:"symbol",source:"geolonia-simple-style-points",filter:["has","point_count"],layout:{"text-field":"{point_count_abbreviated}","text-size":14,"text-font":["Noto Sans Regular"]}}),e.on("click","clusters",(function(t){var o=e.queryRenderedFeatures(t.point,{layers:["clusters"]}),r=o[0].properties.cluster_id;e.getSource("geolonia-simple-style-points").getClusterExpansionZoom(r,(function(t,r){t||e.easeTo({center:o[0].geometry.coordinates,zoom:r})}))})),e.on("mouseenter","clusters",(function(){e.getCanvas().style.cursor="pointer"})),e.on("mouseleave","clusters",(function(){e.getCanvas().style.cursor=""}))}}])&&f(t.prototype,o),e}()},11:e=>{e.exports=function e(t){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.reduce((function(t,o){return t.concat(e(o))}),[]),t;case"Feature":return t.geometry?e(t.geometry).map((function(e){var o={type:"Feature",properties:JSON.parse(JSON.stringify(t.properties)),geometry:e};return void 0!==t.id&&(o.id=t.id),o})):t;case"MultiPoint":return t.coordinates.map((function(e){return{type:"Point",coordinates:e}}));case"MultiPolygon":return t.coordinates.map((function(e){return{type:"Polygon",coordinates:e}}));case"MultiLineString":return t.coordinates.map((function(e){return{type:"LineString",coordinates:e}}));case"GeometryCollection":return t.geometries.map(e).reduce((function(e,t){return e.concat(t)}),[]);case"Point":case"Polygon":case"LineString":return[t]}}},3692:e=>{var t=e.exports=function(e){return new o(e)};function o(e){this.value=e}function r(e,t,o){var r=[],s=[],c=!0;return function e(p){var f=o?n(p):p,y={},b=!0,h={node:f,node_:p,path:[].concat(r),parent:s[s.length-1],parents:s,key:r.slice(-1)[0],isRoot:0===r.length,level:r.length,circular:null,update:function(e,t){h.isRoot||(h.parent.node[h.key]=e),h.node=e,t&&(b=!1)},delete:function(e){delete h.parent.node[h.key],e&&(b=!1)},remove:function(e){l(h.parent.node)?h.parent.node.splice(h.key,1):delete h.parent.node[h.key],e&&(b=!1)},keys:null,before:function(e){y.before=e},after:function(e){y.after=e},pre:function(e){y.pre=e},post:function(e){y.post=e},stop:function(){c=!1},block:function(){b=!1}};if(!c)return h;function g(){if("object"==typeof h.node&&null!==h.node){h.keys&&h.node_===h.node||(h.keys=i(h.node)),h.isLeaf=0==h.keys.length;for(var e=0;e<s.length;e++)if(s[e].node_===p){h.circular=s[e];break}}else h.isLeaf=!0,h.keys=null;h.notLeaf=!h.isLeaf,h.notRoot=!h.isRoot}g();var d=t.call(h,h.node);return void 0!==d&&h.update&&h.update(d),y.before&&y.before.call(h,h.node),b?("object"!=typeof h.node||null===h.node||h.circular||(s.push(h),g(),a(h.keys,(function(t,n){r.push(t),y.pre&&y.pre.call(h,h.node[t],t);var i=e(h.node[t]);o&&u.call(h.node,t)&&(h.node[t]=i.node),i.isLast=n==h.keys.length-1,i.isFirst=0==n,y.post&&y.post.call(h,i),r.pop()})),s.pop()),y.after&&y.after.call(h,h.node),h):h}(e).node}function n(e){if("object"==typeof e&&null!==e){var t;if(l(e))t=[];else if("[object Date]"===s(e))t=new Date(e.getTime?e.getTime():e);else if("[object RegExp]"===s(e))t=new RegExp(e);else if(function(e){return"[object Error]"===s(e)}(e))t={message:e.message};else if(function(e){return"[object Boolean]"===s(e)}(e))t=new Boolean(e);else if(function(e){return"[object Number]"===s(e)}(e))t=new Number(e);else if(function(e){return"[object String]"===s(e)}(e))t=new String(e);else if(Object.create&&Object.getPrototypeOf)t=Object.create(Object.getPrototypeOf(e));else if(e.constructor===Object)t={};else{var o=e.constructor&&e.constructor.prototype||e.__proto__||{},r=function(){};r.prototype=o,t=new r}return a(i(e),(function(o){t[o]=e[o]})),t}return e}o.prototype.get=function(e){for(var t=this.value,o=0;o<e.length;o++){var r=e[o];if(!t||!u.call(t,r)){t=void 0;break}t=t[r]}return t},o.prototype.has=function(e){for(var t=this.value,o=0;o<e.length;o++){var r=e[o];if(!t||!u.call(t,r))return!1;t=t[r]}return!0},o.prototype.set=function(e,t){for(var o=this.value,r=0;r<e.length-1;r++){var n=e[r];u.call(o,n)||(o[n]={}),o=o[n]}return o[e[r]]=t,t},o.prototype.map=function(e){return r(this.value,e,!0)},o.prototype.forEach=function(e){return this.value=r(this.value,e,!1),this.value},o.prototype.reduce=function(e,t){var o=1===arguments.length,r=o?this.value:t;return this.forEach((function(t){this.isRoot&&o||(r=e.call(this,r,t))})),r},o.prototype.paths=function(){var e=[];return this.forEach((function(t){e.push(this.path)})),e},o.prototype.nodes=function(){var e=[];return this.forEach((function(t){e.push(this.node)})),e},o.prototype.clone=function(){var e=[],t=[];return function o(r){for(var s=0;s<e.length;s++)if(e[s]===r)return t[s];if("object"==typeof r&&null!==r){var l=n(r);return e.push(r),t.push(l),a(i(r),(function(e){l[e]=o(r[e])})),e.pop(),t.pop(),l}return r}(this.value)};var i=Object.keys||function(e){var t=[];for(var o in e)t.push(o);return t};function s(e){return Object.prototype.toString.call(e)}var l=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},a=function(e,t){if(e.forEach)return e.forEach(t);for(var o=0;o<e.length;o++)t(e[o],o,e)};a(i(o.prototype),(function(e){t[e]=function(t){var r=[].slice.call(arguments,1),n=new o(t);return n[e].apply(n,r)}}));var u=Object.hasOwnProperty||function(e,t){return t in e}},5347:()=>{},1777:()=>{},4017:()=>{},9905:()=>{},4604:()=>{}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBdkN2SyxPQUFPN0MsVUFBVW1OLFNBQVN0QyxLQUFLdUMsSUFHdENoTCxFQUFVLFNBQVVnTCxFQUFJQyxHQUN4QixHQUFJRCxFQUFHaEwsUUFBUyxPQUFPZ0wsRUFBR2hMLFFBQVFpTCxHQUM3QixJQUFLLElBQUluSyxFQUFJLEVBQUdBLEVBQUlrSyxFQUFHM0wsT0FBUXlCLElBQ2hDbUssRUFBR0QsRUFBR2xLLEdBQUlBLEVBQUdrSyxJQUlyQmhMLEVBQVFvSSxFQUFXakMsRUFBU3ZJLFlBQVksU0FBVXVKLEdBQzlDL0csRUFBUytHLEdBQU8sU0FBVWpCLEdBQ3RCLElBQUlnRixFQUFPLEdBQUc5RCxNQUFNcUIsS0FBS2lDLFVBQVcsR0FDaEM3RSxFQUFJLElBQUlNLEVBQVNELEdBQ3JCLE9BQU9MLEVBQUVzQixHQUFLZ0UsTUFBTXRGLEVBQUdxRixPQUkvQixJQUFJdEMsRUFBaUJuSSxPQUFPbUksZ0JBQWtCLFNBQVUxQyxFQUFLaUIsR0FDekQsT0FBT0EsS0FBT2pCLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ2VvbG9uaWEvZW1iZWQvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9leHRlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGdlb2xvbmlhL2VtYmVkLy4vbm9kZV9tb2R1bGVzL0BtYXBib3gvZ2VvanNvbi1jb29yZHMvZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly9AZ2VvbG9uaWEvZW1iZWQvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9nZW9qc29uLWNvb3Jkcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9AZ2VvbG9uaWEvZW1iZWQvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9nZW9qc29uLWV4dGVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AZ2VvbG9uaWEvZW1iZWQvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9nZW9qc29uLW5vcm1hbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9AZ2VvbG9uaWEvZW1iZWQvLi9zcmMvbGliL3NpbXBsZXN0eWxlLmpzIiwid2VicGFjazovL0BnZW9sb25pYS9lbWJlZC8uL25vZGVfbW9kdWxlcy9nZW9qc29uLWZsYXR0ZW4vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AZ2VvbG9uaWEvZW1iZWQvLi9ub2RlX21vZHVsZXMvdHJhdmVyc2UvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBFeHRlbnQ7XG5cbmZ1bmN0aW9uIEV4dGVudChiYm94KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEV4dGVudCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHRlbnQoYmJveCk7XG4gICAgfVxuICAgIHRoaXMuX2Jib3ggPSBiYm94IHx8IFtJbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5XTtcbiAgICB0aGlzLl92YWxpZCA9ICEhYmJveDtcbn1cblxuRXh0ZW50LnByb3RvdHlwZS5pbmNsdWRlID0gZnVuY3Rpb24obGwpIHtcbiAgICB0aGlzLl92YWxpZCA9IHRydWU7XG4gICAgdGhpcy5fYmJveFswXSA9IE1hdGgubWluKHRoaXMuX2Jib3hbMF0sIGxsWzBdKTtcbiAgICB0aGlzLl9iYm94WzFdID0gTWF0aC5taW4odGhpcy5fYmJveFsxXSwgbGxbMV0pO1xuICAgIHRoaXMuX2Jib3hbMl0gPSBNYXRoLm1heCh0aGlzLl9iYm94WzJdLCBsbFswXSk7XG4gICAgdGhpcy5fYmJveFszXSA9IE1hdGgubWF4KHRoaXMuX2Jib3hbM10sIGxsWzFdKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkV4dGVudC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24oXykge1xuICAgIHZhciBvdGhlcjtcbiAgICBpZiAoXyBpbnN0YW5jZW9mIEV4dGVudCkgeyBvdGhlciA9IF8uYmJveCgpOyB9IGVsc2UgeyBvdGhlciA9IF87IH1cbiAgICByZXR1cm4gdGhpcy5fYmJveFswXSA9PSBvdGhlclswXSAmJlxuICAgICAgICB0aGlzLl9iYm94WzFdID09IG90aGVyWzFdICYmXG4gICAgICAgIHRoaXMuX2Jib3hbMl0gPT0gb3RoZXJbMl0gJiZcbiAgICAgICAgdGhpcy5fYmJveFszXSA9PSBvdGhlclszXTtcbn07XG5cbkV4dGVudC5wcm90b3R5cGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghdGhpcy5fdmFsaWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBbXG4gICAgICAgICh0aGlzLl9iYm94WzBdICsgdGhpcy5fYmJveFsyXSkgLyAyLFxuICAgICAgICAodGhpcy5fYmJveFsxXSArIHRoaXMuX2Jib3hbM10pIC8gMl1cbn07XG5cbkV4dGVudC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbihfKSB7XG4gICAgdGhpcy5fdmFsaWQgPSB0cnVlO1xuICAgIHZhciBvdGhlcjtcbiAgICBpZiAoXyBpbnN0YW5jZW9mIEV4dGVudCkgeyBvdGhlciA9IF8uYmJveCgpOyB9IGVsc2UgeyBvdGhlciA9IF87IH1cbiAgICB0aGlzLl9iYm94WzBdID0gTWF0aC5taW4odGhpcy5fYmJveFswXSwgb3RoZXJbMF0pO1xuICAgIHRoaXMuX2Jib3hbMV0gPSBNYXRoLm1pbih0aGlzLl9iYm94WzFdLCBvdGhlclsxXSk7XG4gICAgdGhpcy5fYmJveFsyXSA9IE1hdGgubWF4KHRoaXMuX2Jib3hbMl0sIG90aGVyWzJdKTtcbiAgICB0aGlzLl9iYm94WzNdID0gTWF0aC5tYXgodGhpcy5fYmJveFszXSwgb3RoZXJbM10pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuRXh0ZW50LnByb3RvdHlwZS5iYm94ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLl92YWxpZCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX2Jib3g7XG59O1xuXG5FeHRlbnQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24obGwpIHtcbiAgICBpZiAoIWxsKSByZXR1cm4gdGhpcy5fZmFzdENvbnRhaW5zKCk7XG4gICAgaWYgKCF0aGlzLl92YWxpZCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIGxvbiA9IGxsWzBdLCBsYXQgPSBsbFsxXTtcbiAgICByZXR1cm4gdGhpcy5fYmJveFswXSA8PSBsb24gJiZcbiAgICAgICAgdGhpcy5fYmJveFsxXSA8PSBsYXQgJiZcbiAgICAgICAgdGhpcy5fYmJveFsyXSA+PSBsb24gJiZcbiAgICAgICAgdGhpcy5fYmJveFszXSA+PSBsYXQ7XG59O1xuXG5FeHRlbnQucHJvdG90eXBlLmludGVyc2VjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIXRoaXMuX3ZhbGlkKSByZXR1cm4gbnVsbDtcblxuICAgIHZhciBvdGhlcjtcbiAgICBpZiAoXyBpbnN0YW5jZW9mIEV4dGVudCkgeyBvdGhlciA9IF8uYmJveCgpOyB9IGVsc2UgeyBvdGhlciA9IF87IH1cblxuICAgIHJldHVybiAhKFxuICAgICAgdGhpcy5fYmJveFswXSA+IG90aGVyWzJdIHx8XG4gICAgICB0aGlzLl9iYm94WzJdIDwgb3RoZXJbMF0gfHxcbiAgICAgIHRoaXMuX2Jib3hbM10gPCBvdGhlclsxXSB8fFxuICAgICAgdGhpcy5fYmJveFsxXSA+IG90aGVyWzNdXG4gICAgKTtcbn07XG5cbkV4dGVudC5wcm90b3R5cGUuX2Zhc3RDb250YWlucyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5fdmFsaWQpIHJldHVybiBuZXcgRnVuY3Rpb24oJ3JldHVybiBudWxsOycpO1xuICAgIHZhciBib2R5ID0gJ3JldHVybiAnICtcbiAgICAgICAgdGhpcy5fYmJveFswXSArICc8PSBsbFswXSAmJicgK1xuICAgICAgICB0aGlzLl9iYm94WzFdICsgJzw9IGxsWzFdICYmJyArXG4gICAgICAgIHRoaXMuX2Jib3hbMl0gKyAnPj0gbGxbMF0gJiYnICtcbiAgICAgICAgdGhpcy5fYmJveFszXSArICc+PSBsbFsxXSc7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbignbGwnLCBib2R5KTtcbn07XG5cbkV4dGVudC5wcm90b3R5cGUucG9seWdvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5fdmFsaWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvLyBXLCBTXG4gICAgICAgICAgICAgICAgW3RoaXMuX2Jib3hbMF0sIHRoaXMuX2Jib3hbMV1dLFxuICAgICAgICAgICAgICAgIC8vIEUsIFNcbiAgICAgICAgICAgICAgICBbdGhpcy5fYmJveFsyXSwgdGhpcy5fYmJveFsxXV0sXG4gICAgICAgICAgICAgICAgLy8gRSwgTlxuICAgICAgICAgICAgICAgIFt0aGlzLl9iYm94WzJdLCB0aGlzLl9iYm94WzNdXSxcbiAgICAgICAgICAgICAgICAvLyBXLCBOXG4gICAgICAgICAgICAgICAgW3RoaXMuX2Jib3hbMF0sIHRoaXMuX2Jib3hbM11dLFxuICAgICAgICAgICAgICAgIC8vIFcsIFNcbiAgICAgICAgICAgICAgICBbdGhpcy5fYmJveFswXSwgdGhpcy5fYmJveFsxXV1cbiAgICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGF0dGVuKGxpc3QpIHtcbiAgICByZXR1cm4gX2ZsYXR0ZW4obGlzdCk7XG5cbiAgICBmdW5jdGlvbiBfZmxhdHRlbihsaXN0KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGxpc3QpICYmIGxpc3QubGVuZ3RoICYmXG4gICAgICAgICAgICB0eXBlb2YgbGlzdFswXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBbbGlzdF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIEFycmF5LmlzQXJyYXkoaXRlbVswXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChfZmxhdHRlbihpdGVtKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjYy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG59O1xuIiwidmFyIGdlb2pzb25Ob3JtYWxpemUgPSByZXF1aXJlKCdAbWFwYm94L2dlb2pzb24tbm9ybWFsaXplJyksXG4gICAgZ2VvanNvbkZsYXR0ZW4gPSByZXF1aXJlKCdnZW9qc29uLWZsYXR0ZW4nKSxcbiAgICBmbGF0dGVuID0gcmVxdWlyZSgnLi9mbGF0dGVuJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghXykgcmV0dXJuIFtdO1xuICAgIHZhciBub3JtYWxpemVkID0gZ2VvanNvbkZsYXR0ZW4oZ2VvanNvbk5vcm1hbGl6ZShfKSksXG4gICAgICAgIGNvb3JkaW5hdGVzID0gW107XG4gICAgbm9ybWFsaXplZC5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgICAgICAgaWYgKCFmZWF0dXJlLmdlb21ldHJ5KSByZXR1cm47XG4gICAgICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXMuY29uY2F0KGZsYXR0ZW4oZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcykpO1xuICAgIH0pO1xuICAgIHJldHVybiBjb29yZGluYXRlcztcbn07XG4iLCJ2YXIgZ2VvanNvbkNvb3JkcyA9IHJlcXVpcmUoJ0BtYXBib3gvZ2VvanNvbi1jb29yZHMnKSxcbiAgICB0cmF2ZXJzZSA9IHJlcXVpcmUoJ3RyYXZlcnNlJyksXG4gICAgZXh0ZW50ID0gcmVxdWlyZSgnQG1hcGJveC9leHRlbnQnKTtcblxudmFyIGdlb2pzb25UeXBlc0J5RGF0YUF0dHJpYnV0ZXMgPSB7XG4gICAgZmVhdHVyZXM6IFsnRmVhdHVyZUNvbGxlY3Rpb24nXSxcbiAgICBjb29yZGluYXRlczogWydQb2ludCcsICdNdWx0aVBvaW50JywgJ0xpbmVTdHJpbmcnLCAnTXVsdGlMaW5lU3RyaW5nJywgJ1BvbHlnb24nLCAnTXVsdGlQb2x5Z29uJ10sXG4gICAgZ2VvbWV0cnk6IFsnRmVhdHVyZSddLFxuICAgIGdlb21ldHJpZXM6IFsnR2VvbWV0cnlDb2xsZWN0aW9uJ11cbn1cblxudmFyIGRhdGFBdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoZ2VvanNvblR5cGVzQnlEYXRhQXR0cmlidXRlcyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBnZXRFeHRlbnQoXykuYmJveCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMucG9seWdvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gZ2V0RXh0ZW50KF8pLnBvbHlnb24oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmJib3hpZnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHRyYXZlcnNlKF8pLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gO1xuXG4gICAgICAgIHZhciBpc1ZhbGlkID0gZGF0YUF0dHJpYnV0ZXMuc29tZShmdW5jdGlvbihhdHRyaWJ1dGUpe1xuICAgICAgICAgICAgaWYodmFsdWVbYXR0cmlidXRlXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZW9qc29uVHlwZXNCeURhdGFBdHRyaWJ1dGVzW2F0dHJpYnV0ZV0uaW5kZXhPZih2YWx1ZS50eXBlKSAhPT0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmKGlzVmFsaWQpe1xuICAgICAgICAgICAgdmFsdWUuYmJveCA9IGdldEV4dGVudCh2YWx1ZSkuYmJveCgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIGdldEV4dGVudChfKSB7XG4gICAgdmFyIGJib3ggPSBbSW5maW5pdHksIEluZmluaXR5LCAtSW5maW5pdHksIC1JbmZpbml0eV0sXG4gICAgICAgIGV4dCA9IGV4dGVudCgpLFxuICAgICAgICBjb29yZHMgPSBnZW9qc29uQ29vcmRzKF8pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSBleHQuaW5jbHVkZShjb29yZHNbaV0pO1xuICAgIHJldHVybiBleHQ7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZTtcblxudmFyIHR5cGVzID0ge1xuICAgIFBvaW50OiAnZ2VvbWV0cnknLFxuICAgIE11bHRpUG9pbnQ6ICdnZW9tZXRyeScsXG4gICAgTGluZVN0cmluZzogJ2dlb21ldHJ5JyxcbiAgICBNdWx0aUxpbmVTdHJpbmc6ICdnZW9tZXRyeScsXG4gICAgUG9seWdvbjogJ2dlb21ldHJ5JyxcbiAgICBNdWx0aVBvbHlnb246ICdnZW9tZXRyeScsXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiAnZ2VvbWV0cnknLFxuICAgIEZlYXR1cmU6ICdmZWF0dXJlJyxcbiAgICBGZWF0dXJlQ29sbGVjdGlvbjogJ2ZlYXR1cmVjb2xsZWN0aW9uJ1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemUgYSBHZW9KU09OIGZlYXR1cmUgaW50byBhIEZlYXR1cmVDb2xsZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBnaiBnZW9qc29uIGRhdGFcbiAqIEByZXR1cm5zIHtvYmplY3R9IG5vcm1hbGl6ZWQgZ2VvanNvbiBkYXRhXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShnaikge1xuICAgIGlmICghZ2ogfHwgIWdqLnR5cGUpIHJldHVybiBudWxsO1xuICAgIHZhciB0eXBlID0gdHlwZXNbZ2oudHlwZV07XG4gICAgaWYgKCF0eXBlKSByZXR1cm4gbnVsbDtcblxuICAgIGlmICh0eXBlID09PSAnZ2VvbWV0cnknKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICAgICAgICAgZmVhdHVyZXM6IFt7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBnalxuICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmZWF0dXJlJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBbZ2pdXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZmVhdHVyZWNvbGxlY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBnajtcbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBtYXBsaWJyZWdsIGZyb20gJ21hcGxpYnJlLWdsJztcbmltcG9ydCBnZW9qc29uRXh0ZW50IGZyb20gJ0BtYXBib3gvZ2VvanNvbi1leHRlbnQnO1xuaW1wb3J0IHR1cmZDZW50ZXIgZnJvbSAnQHR1cmYvY2VudGVyJztcbmltcG9ydCBzYW5pdGl6ZUh0bWwgZnJvbSAnc2FuaXRpemUtaHRtbCc7XG5cbmNvbnN0IHRleHRDb2xvciA9ICcjMDAwMDAwJztcbmNvbnN0IHRleHRIYWxvQ29sb3IgPSAnI0ZGRkZGRic7XG5jb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgyNTUsIDAsIDAsIDAuNCknO1xuY29uc3Qgc3Ryb2tlQ29sb3IgPSAnI0ZGRkZGRic7XG5cbmNsYXNzIFNpbXBsZVN0eWxlIHtcbiAgY29uc3RydWN0b3IoanNvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuanNvbiA9IGpzb247XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBjbHVzdGVyOiB0cnVlLFxuICAgICAgaGVhdG1hcDogZmFsc2UsXG4gICAgICBjbHVzdGVyQ29sb3I6ICcjZmYwMDAwJyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIGFkZFRvKG1hcCkge1xuICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5qc29uLmZlYXR1cmVzO1xuICAgIGNvbnN0IHBvbHlnb25hbmRsaW5lcyA9IGZlYXR1cmVzLmZpbHRlcigoZmVhdHVyZSkgPT4gKGZlYXR1cmUuZ2VvbWV0cnkudHlwZS50b0xvd2VyQ2FzZSgpICE9PSAncG9pbnQnKSk7XG4gICAgY29uc3QgcG9pbnRzID0gZmVhdHVyZXMuZmlsdGVyKChmZWF0dXJlKSA9PiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdwb2ludCcpKTtcblxuICAgIG1hcC5hZGRTb3VyY2UoJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZScsIHtcbiAgICAgIHR5cGU6ICdnZW9qc29uJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IHBvbHlnb25hbmRsaW5lcyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFBvbHlnb25HZW9tZXRyaWVzKG1hcCk7XG4gICAgdGhpcy5zZXRMaW5lR2VvbWV0cmllcyhtYXApO1xuXG4gICAgbWFwLmFkZFNvdXJjZSgnZ2VvbG9uaWEtc2ltcGxlLXN0eWxlLXBvaW50cycsIHtcbiAgICAgIHR5cGU6ICdnZW9qc29uJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IHBvaW50cyxcbiAgICAgIH0sXG4gICAgICBjbHVzdGVyOiB0aGlzLm9wdGlvbnMuY2x1c3RlcixcbiAgICAgIGNsdXN0ZXJNYXhab29tOiAxNCxcbiAgICAgIGNsdXN0ZXJSYWRpdXM6IDUwLFxuICAgIH0pO1xuXG4gICAgbWFwLmFkZExheWVyKHtcbiAgICAgIGlkOiAnZ2VvbG9uaWEtc2ltcGxlLXN0eWxlLXBvbHlnb24tc3ltYm9sJyxcbiAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgc291cmNlOiAnZ2VvbG9uaWEtc2ltcGxlLXN0eWxlJyxcbiAgICAgIGZpbHRlcjogWyc9PScsICckdHlwZScsICdQb2x5Z29uJ10sXG4gICAgICBwYWludDoge1xuICAgICAgICAndGV4dC1jb2xvcic6IFsnc3RyaW5nJywgWydnZXQnLCAndGV4dC1jb2xvciddLCB0ZXh0Q29sb3JdLFxuICAgICAgICAndGV4dC1oYWxvLWNvbG9yJzogWydzdHJpbmcnLCBbJ2dldCcsICd0ZXh0LWhhbG8tY29sb3InXSwgdGV4dEhhbG9Db2xvcl0sXG4gICAgICAgICd0ZXh0LWhhbG8td2lkdGgnOiAxLFxuICAgICAgfSxcbiAgICAgIGxheW91dDoge1xuICAgICAgICAndGV4dC1maWVsZCc6IFsnZ2V0JywgJ3RpdGxlJ10sXG4gICAgICAgICd0ZXh0LWZvbnQnOiBbJ05vdG8gU2FucyBSZWd1bGFyJ10sXG4gICAgICAgICd0ZXh0LXNpemUnOiAxMixcbiAgICAgICAgJ3RleHQtbWF4LXdpZHRoJzogMTIsXG4gICAgICAgICd0ZXh0LWFsbG93LW92ZXJsYXAnOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBtYXAuYWRkTGF5ZXIoe1xuICAgICAgaWQ6ICdnZW9sb25pYS1zaW1wbGUtc3R5bGUtbGluZXN0cmluZy1zeW1ib2wnLFxuICAgICAgdHlwZTogJ3N5bWJvbCcsXG4gICAgICBzb3VyY2U6ICdnZW9sb25pYS1zaW1wbGUtc3R5bGUnLFxuICAgICAgZmlsdGVyOiBbJz09JywgJyR0eXBlJywgJ0xpbmVTdHJpbmcnXSxcbiAgICAgIHBhaW50OiB7XG4gICAgICAgICd0ZXh0LWNvbG9yJzogWydzdHJpbmcnLCBbJ2dldCcsICd0ZXh0LWNvbG9yJ10sIHRleHRDb2xvcl0sXG4gICAgICAgICd0ZXh0LWhhbG8tY29sb3InOiBbJ3N0cmluZycsIFsnZ2V0JywgJ3RleHQtaGFsby1jb2xvciddLCB0ZXh0SGFsb0NvbG9yXSxcbiAgICAgICAgJ3RleHQtaGFsby13aWR0aCc6IDEsXG4gICAgICB9LFxuICAgICAgbGF5b3V0OiB7XG4gICAgICAgICdzeW1ib2wtcGxhY2VtZW50JzogJ2xpbmUnLFxuICAgICAgICAndGV4dC1maWVsZCc6IFsnZ2V0JywgJ3RpdGxlJ10sXG4gICAgICAgICd0ZXh0LWZvbnQnOiBbJ05vdG8gU2FucyBSZWd1bGFyJ10sXG4gICAgICAgICd0ZXh0LXNpemUnOiAxMixcbiAgICAgICAgJ3RleHQtbWF4LXdpZHRoJzogMTIsXG4gICAgICAgICd0ZXh0LWFsbG93LW92ZXJsYXAnOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFBvaW50R2VvbWV0cmllcyhtYXApO1xuICAgIHRoaXMuc2V0Q2x1c3RlcihtYXApO1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gbWFwLmdldENvbnRhaW5lcigpO1xuXG4gICAgaWYgKCFjb250YWluZXIuZGF0YXNldCB8fCAoIWNvbnRhaW5lci5kYXRhc2V0LmxuZyAmJiAhY29udGFpbmVyLmRhdGFzZXQubGF0KSkge1xuICAgICAgY29uc3QgYm91bmRzID0gZ2VvanNvbkV4dGVudCh0aGlzLmpzb24pO1xuICAgICAgbWFwLmZpdEJvdW5kcyhib3VuZHMsIHtcbiAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgIHBhZGRpbmc6IDMwLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBwb2x5Z29uIGdlb21ldHJpZXMuXG4gICAqXG4gICAqIEBwYXJhbSBtYXBcbiAgICovXG4gIHNldFBvbHlnb25HZW9tZXRyaWVzKG1hcCkge1xuICAgIG1hcC5hZGRMYXllcih7XG4gICAgICBpZDogJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZS1wb2x5Z29uJyxcbiAgICAgIHR5cGU6ICdmaWxsJyxcbiAgICAgIHNvdXJjZTogJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZScsXG4gICAgICBmaWx0ZXI6IFsnPT0nLCAnJHR5cGUnLCAnUG9seWdvbiddLFxuICAgICAgcGFpbnQ6IHtcbiAgICAgICAgJ2ZpbGwtY29sb3InOiBbJ3N0cmluZycsIFsnZ2V0JywgJ2ZpbGwnXSwgYmFja2dyb3VuZENvbG9yXSxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IFsnbnVtYmVyJywgWydnZXQnLCAnZmlsbC1vcGFjaXR5J10sIDEuMF0sXG4gICAgICAgICdmaWxsLW91dGxpbmUtY29sb3InOiBbJ3N0cmluZycsIFsnZ2V0JywgJ3N0cm9rZSddLCBzdHJva2VDb2xvcl0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRQb3B1cChtYXAsICdnZW9sb25pYS1zaW1wbGUtc3R5bGUtcG9seWdvbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsaW5lIGdlb21ldHJpZXMuXG4gICAqXG4gICAqIEBwYXJhbSBtYXBcbiAgICovXG4gIHNldExpbmVHZW9tZXRyaWVzKG1hcCkge1xuICAgIG1hcC5hZGRMYXllcih7XG4gICAgICBpZDogJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZS1saW5lc3RyaW5nJyxcbiAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgIHNvdXJjZTogJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZScsXG4gICAgICBmaWx0ZXI6IFsnPT0nLCAnJHR5cGUnLCAnTGluZVN0cmluZyddLFxuICAgICAgcGFpbnQ6IHtcbiAgICAgICAgJ2xpbmUtd2lkdGgnOiBbJ251bWJlcicsIFsnZ2V0JywgJ3N0cm9rZS13aWR0aCddLCAyXSxcbiAgICAgICAgJ2xpbmUtY29sb3InOiBbJ3N0cmluZycsIFsnZ2V0JywgJ3N0cm9rZSddLCBiYWNrZ3JvdW5kQ29sb3JdLFxuICAgICAgICAnbGluZS1vcGFjaXR5JzogWydudW1iZXInLCBbJ2dldCcsICdzdHJva2Utb3BhY2l0eSddLCAxLjBdLFxuICAgICAgfSxcbiAgICAgIGxheW91dDoge1xuICAgICAgICAnbGluZS1jYXAnOiAncm91bmQnLFxuICAgICAgICAnbGluZS1qb2luJzogJ3JvdW5kJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFBvcHVwKG1hcCwgJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZS1saW5lc3RyaW5nJyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0dXAgcG9pbnQgZ2VvbWV0cmllcy5cbiAgICpcbiAgICogQHBhcmFtIG1hcFxuICAgKi9cbiAgc2V0UG9pbnRHZW9tZXRyaWVzKG1hcCkge1xuICAgIG1hcC5hZGRMYXllcih7XG4gICAgICBpZDogJ2NpcmNsZS1zaW1wbGUtc3R5bGUtcG9pbnRzJyxcbiAgICAgIHR5cGU6ICdjaXJjbGUnLFxuICAgICAgc291cmNlOiAnZ2VvbG9uaWEtc2ltcGxlLXN0eWxlLXBvaW50cycsXG4gICAgICBmaWx0ZXI6IFsnIScsIFsnaGFzJywgJ3BvaW50X2NvdW50J11dLFxuICAgICAgcGFpbnQ6IHtcbiAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiBbXG4gICAgICAgICAgJ2Nhc2UnLFxuICAgICAgICAgIFsnPT0nLCAnc21hbGwnLCBbJ2dldCcsICdtYXJrZXItc2l6ZSddXSwgNyxcbiAgICAgICAgICBbJz09JywgJ2xhcmdlJywgWydnZXQnLCAnbWFya2VyLXNpemUnXV0sIDEzLFxuICAgICAgICAgIDksXG4gICAgICAgIF0sXG4gICAgICAgICdjaXJjbGUtY29sb3InOiBbJ3N0cmluZycsIFsnZ2V0JywgJ21hcmtlci1jb2xvciddLCBiYWNrZ3JvdW5kQ29sb3JdLFxuICAgICAgICAnY2lyY2xlLW9wYWNpdHknOiBbJ251bWJlcicsIFsnZ2V0JywgJ2ZpbGwtb3BhY2l0eSddLCAxLjBdLFxuICAgICAgICAnY2lyY2xlLXN0cm9rZS13aWR0aCc6IFsnbnVtYmVyJywgWydnZXQnLCAnc3Ryb2tlLXdpZHRoJ10sIDFdLFxuICAgICAgICAnY2lyY2xlLXN0cm9rZS1jb2xvcic6IFsnc3RyaW5nJywgWydnZXQnLCAnc3Ryb2tlJ10sIHN0cm9rZUNvbG9yXSxcbiAgICAgICAgJ2NpcmNsZS1zdHJva2Utb3BhY2l0eSc6IFsnbnVtYmVyJywgWydnZXQnLCAnc3Ryb2tlLW9wYWNpdHknXSwgMS4wXSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBtYXAuYWRkTGF5ZXIoe1xuICAgICAgaWQ6ICdzeW1ib2wtc2ltcGxlLXN0eWxlLXBvaW50cycsXG4gICAgICB0eXBlOiAnc3ltYm9sJyxcbiAgICAgIHNvdXJjZTogJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZS1wb2ludHMnLFxuICAgICAgZmlsdGVyOiBbJyEnLCBbJ2hhcycsICdwb2ludF9jb3VudCddXSxcbiAgICAgIHBhaW50OiB7XG4gICAgICAgICd0ZXh0LWNvbG9yJzogWydzdHJpbmcnLCBbJ2dldCcsICd0ZXh0LWNvbG9yJ10sIHRleHRDb2xvcl0sXG4gICAgICAgICd0ZXh0LWhhbG8tY29sb3InOiBbJ3N0cmluZycsIFsnZ2V0JywgJ3RleHQtaGFsby1jb2xvciddLCB0ZXh0SGFsb0NvbG9yXSxcbiAgICAgICAgJ3RleHQtaGFsby13aWR0aCc6IDEsXG4gICAgICB9LFxuICAgICAgbGF5b3V0OiB7XG4gICAgICAgICdpY29uLWltYWdlJzogW1xuICAgICAgICAgICdjYXNlJyxcbiAgICAgICAgICBbJz09JywgJ2xhcmdlJywgWydnZXQnLCAnbWFya2VyLXNpemUnXV0sIFsnaW1hZ2UnLCBbJ2NvbmNhdCcsIFsnZ2V0JywgJ21hcmtlci1zeW1ib2wnXSwgJy0xNSddXSxcbiAgICAgICAgICBbJ2ltYWdlJywgWydjb25jYXQnLCBbJ2dldCcsICdtYXJrZXItc3ltYm9sJ10sICctMTEnXV0sXG4gICAgICAgIF0sXG4gICAgICAgICd0ZXh0LWZpZWxkJzogWydnZXQnLCAndGl0bGUnXSxcbiAgICAgICAgJ3RleHQtZm9udCc6IFsnTm90byBTYW5zIFJlZ3VsYXInXSxcbiAgICAgICAgJ3RleHQtc2l6ZSc6IDEyLFxuICAgICAgICAndGV4dC1hbmNob3InOiAndG9wJyxcbiAgICAgICAgJ3RleHQtbWF4LXdpZHRoJzogMTIsXG4gICAgICAgICd0ZXh0LW9mZnNldCc6IFtcbiAgICAgICAgICAnY2FzZScsXG4gICAgICAgICAgWyc9PScsICdzbWFsbCcsIFsnZ2V0JywgJ21hcmtlci1zaXplJ11dLCBbJ2xpdGVyYWwnLCBbMCwgMC42XV0sXG4gICAgICAgICAgWyc9PScsICdsYXJnZScsIFsnZ2V0JywgJ21hcmtlci1zaXplJ11dLCBbJ2xpdGVyYWwnLCBbMCwgMS4yXV0sXG4gICAgICAgICAgWydsaXRlcmFsJywgWzAsIDAuOF1dLFxuICAgICAgICBdLFxuICAgICAgICAndGV4dC1hbGxvdy1vdmVybGFwJzogZmFsc2UsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRQb3B1cChtYXAsICdjaXJjbGUtc2ltcGxlLXN0eWxlLXBvaW50cycpO1xuICB9XG5cbiAgc2V0UG9wdXAobWFwLCBzb3VyY2UpIHtcbiAgICBtYXAub24oJ2NsaWNrJywgc291cmNlLCAoZSkgPT4ge1xuICAgICAgY29uc3QgY2VudGVyID0gdHVyZkNlbnRlcihlLmZlYXR1cmVzWzBdKS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZS5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmRlc2NyaXB0aW9uO1xuXG4gICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgbmV3IG1hcGxpYnJlZ2wuUG9wdXAoKS5zZXRMbmdMYXQoY2VudGVyKS5zZXRIVE1MKHNhbml0aXplSHRtbChkZXNjcmlwdGlvbikpLmFkZFRvKG1hcCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBtYXAub24oJ21vdXNlZW50ZXInLCBzb3VyY2UsIChlKSA9PiB7XG4gICAgICBpZiAoZS5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgIG1hcC5nZXRDYW52YXMoKS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBtYXAub24oJ21vdXNlbGVhdmUnLCBzb3VyY2UsICgpID0+IHtcbiAgICAgIG1hcC5nZXRDYW52YXMoKS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBjbHVzdGVyIG1hcmtlcnNcbiAgICpcbiAgICogQHBhcmFtIG1hcFxuICAgKi9cbiAgc2V0Q2x1c3RlcihtYXApIHtcbiAgICBtYXAuYWRkTGF5ZXIoe1xuICAgICAgaWQ6ICdjbHVzdGVycycsXG4gICAgICB0eXBlOiAnY2lyY2xlJyxcbiAgICAgIHNvdXJjZTogJ2dlb2xvbmlhLXNpbXBsZS1zdHlsZS1wb2ludHMnLFxuICAgICAgZmlsdGVyOiBbJ2hhcycsICdwb2ludF9jb3VudCddLFxuICAgICAgcGFpbnQ6IHtcbiAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiAyMCxcbiAgICAgICAgJ2NpcmNsZS1jb2xvcic6IHRoaXMub3B0aW9ucy5jbHVzdGVyQ29sb3IsXG4gICAgICAgICdjaXJjbGUtb3BhY2l0eSc6IDEuMCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBtYXAuYWRkTGF5ZXIoe1xuICAgICAgaWQ6ICdjbHVzdGVyLWNvdW50JyxcbiAgICAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAgc291cmNlOiAnZ2VvbG9uaWEtc2ltcGxlLXN0eWxlLXBvaW50cycsXG4gICAgICBmaWx0ZXI6IFsnaGFzJywgJ3BvaW50X2NvdW50J10sXG4gICAgICBsYXlvdXQ6IHtcbiAgICAgICAgJ3RleHQtZmllbGQnOiAne3BvaW50X2NvdW50X2FiYnJldmlhdGVkfScsXG4gICAgICAgICd0ZXh0LXNpemUnOiAxNCxcbiAgICAgICAgJ3RleHQtZm9udCc6IFsnTm90byBTYW5zIFJlZ3VsYXInXSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBtYXAub24oJ2NsaWNrJywgJ2NsdXN0ZXJzJywgKGUpID0+IHtcbiAgICAgIGNvbnN0IGZlYXR1cmVzID0gbWFwLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhlLnBvaW50LCB7IGxheWVyczogWydjbHVzdGVycyddIH0pO1xuICAgICAgY29uc3QgY2x1c3RlcklkID0gZmVhdHVyZXNbMF0ucHJvcGVydGllcy5jbHVzdGVyX2lkO1xuICAgICAgbWFwLmdldFNvdXJjZSgnZ2VvbG9uaWEtc2ltcGxlLXN0eWxlLXBvaW50cycpLmdldENsdXN0ZXJFeHBhbnNpb25ab29tKGNsdXN0ZXJJZCwgKGVyciwgem9vbSkgPT4ge1xuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBtYXAuZWFzZVRvKHtcbiAgICAgICAgICBjZW50ZXI6IGZlYXR1cmVzWzBdLmdlb21ldHJ5LmNvb3JkaW5hdGVzLFxuICAgICAgICAgIHpvb206IHpvb20sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBtYXAub24oJ21vdXNlZW50ZXInLCAnY2x1c3RlcnMnLCAoKSA9PiB7XG4gICAgICBtYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgIH0pO1xuXG4gICAgbWFwLm9uKCdtb3VzZWxlYXZlJywgJ2NsdXN0ZXJzJywgKCkgPT4ge1xuICAgICAgbWFwLmdldENhbnZhcygpLnN0eWxlLmN1cnNvciA9ICcnO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXBsZVN0eWxlO1xuIiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gZSh0KXtzd2l0Y2godCYmdC50eXBlfHxudWxsKXtjYXNlXCJGZWF0dXJlQ29sbGVjdGlvblwiOnJldHVybiB0LmZlYXR1cmVzPXQuZmVhdHVyZXMucmVkdWNlKGZ1bmN0aW9uKHQscil7cmV0dXJuIHQuY29uY2F0KGUocikpfSxbXSksdDtjYXNlXCJGZWF0dXJlXCI6cmV0dXJuIHQuZ2VvbWV0cnk/ZSh0Lmdlb21ldHJ5KS5tYXAoZnVuY3Rpb24oZSl7dmFyIHI9e3R5cGU6XCJGZWF0dXJlXCIscHJvcGVydGllczpKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQucHJvcGVydGllcykpLGdlb21ldHJ5OmV9O3JldHVybiB2b2lkIDAhPT10LmlkJiYoci5pZD10LmlkKSxyfSk6dDtjYXNlXCJNdWx0aVBvaW50XCI6cmV0dXJuIHQuY29vcmRpbmF0ZXMubWFwKGZ1bmN0aW9uKGUpe3JldHVybnt0eXBlOlwiUG9pbnRcIixjb29yZGluYXRlczplfX0pO2Nhc2VcIk11bHRpUG9seWdvblwiOnJldHVybiB0LmNvb3JkaW5hdGVzLm1hcChmdW5jdGlvbihlKXtyZXR1cm57dHlwZTpcIlBvbHlnb25cIixjb29yZGluYXRlczplfX0pO2Nhc2VcIk11bHRpTGluZVN0cmluZ1wiOnJldHVybiB0LmNvb3JkaW5hdGVzLm1hcChmdW5jdGlvbihlKXtyZXR1cm57dHlwZTpcIkxpbmVTdHJpbmdcIixjb29yZGluYXRlczplfX0pO2Nhc2VcIkdlb21ldHJ5Q29sbGVjdGlvblwiOnJldHVybiB0Lmdlb21ldHJpZXMubWFwKGUpLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbmNhdCh0KX0sW10pO2Nhc2VcIlBvaW50XCI6Y2FzZVwiUG9seWdvblwiOmNhc2VcIkxpbmVTdHJpbmdcIjpyZXR1cm5bdF19fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwidmFyIHRyYXZlcnNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBUcmF2ZXJzZShvYmopO1xufTtcblxuZnVuY3Rpb24gVHJhdmVyc2UgKG9iaikge1xuICAgIHRoaXMudmFsdWUgPSBvYmo7XG59XG5cblRyYXZlcnNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocHMpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMudmFsdWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcy5sZW5ndGg7IGkgKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHBzW2ldO1xuICAgICAgICBpZiAoIW5vZGUgfHwgIWhhc093blByb3BlcnR5LmNhbGwobm9kZSwga2V5KSkge1xuICAgICAgICAgICAgbm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlW2tleV07XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufTtcblxuVHJhdmVyc2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChwcykge1xuICAgIHZhciBub2RlID0gdGhpcy52YWx1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBzLmxlbmd0aDsgaSArKykge1xuICAgICAgICB2YXIga2V5ID0gcHNbaV07XG4gICAgICAgIGlmICghbm9kZSB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChub2RlLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGVba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5UcmF2ZXJzZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHBzLCB2YWx1ZSkge1xuICAgIHZhciBub2RlID0gdGhpcy52YWx1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBzLmxlbmd0aCAtIDE7IGkgKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHBzW2ldO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobm9kZSwga2V5KSkgbm9kZVtrZXldID0ge307XG4gICAgICAgIG5vZGUgPSBub2RlW2tleV07XG4gICAgfVxuICAgIG5vZGVbcHNbaV1dID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuVHJhdmVyc2UucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChjYikge1xuICAgIHJldHVybiB3YWxrKHRoaXMudmFsdWUsIGNiLCB0cnVlKTtcbn07XG5cblRyYXZlcnNlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgdGhpcy52YWx1ZSA9IHdhbGsodGhpcy52YWx1ZSwgY2IsIGZhbHNlKTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cblRyYXZlcnNlLnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoY2IsIGluaXQpIHtcbiAgICB2YXIgc2tpcCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDE7XG4gICAgdmFyIGFjYyA9IHNraXAgPyB0aGlzLnZhbHVlIDogaW5pdDtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUm9vdCB8fCAhc2tpcCkge1xuICAgICAgICAgICAgYWNjID0gY2IuY2FsbCh0aGlzLCBhY2MsIHgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbn07XG5cblRyYXZlcnNlLnByb3RvdHlwZS5wYXRocyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYWNjID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGFjYy5wdXNoKHRoaXMucGF0aCk7IFxuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG59O1xuXG5UcmF2ZXJzZS5wcm90b3R5cGUubm9kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFjYyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICBhY2MucHVzaCh0aGlzLm5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG59O1xuXG5UcmF2ZXJzZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudHMgPSBbXSwgbm9kZXMgPSBbXTtcbiAgICBcbiAgICByZXR1cm4gKGZ1bmN0aW9uIGNsb25lIChzcmMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50c1tpXSA9PT0gc3JjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ29iamVjdCcgJiYgc3JjICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZHN0ID0gY29weShzcmMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwYXJlbnRzLnB1c2goc3JjKTtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goZHN0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yRWFjaChvYmplY3RLZXlzKHNyYyksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkc3Rba2V5XSA9IGNsb25lKHNyY1trZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwYXJlbnRzLnBvcCgpO1xuICAgICAgICAgICAgbm9kZXMucG9wKCk7XG4gICAgICAgICAgICByZXR1cm4gZHN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNyYztcbiAgICAgICAgfVxuICAgIH0pKHRoaXMudmFsdWUpO1xufTtcblxuZnVuY3Rpb24gd2FsayAocm9vdCwgY2IsIGltbXV0YWJsZSkge1xuICAgIHZhciBwYXRoID0gW107XG4gICAgdmFyIHBhcmVudHMgPSBbXTtcbiAgICB2YXIgYWxpdmUgPSB0cnVlO1xuICAgIFxuICAgIHJldHVybiAoZnVuY3Rpb24gd2Fsa2VyIChub2RlXykge1xuICAgICAgICB2YXIgbm9kZSA9IGltbXV0YWJsZSA/IGNvcHkobm9kZV8pIDogbm9kZV87XG4gICAgICAgIHZhciBtb2RpZmllcnMgPSB7fTtcbiAgICAgICAgXG4gICAgICAgIHZhciBrZWVwR29pbmcgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICAgICAgbm9kZSA6IG5vZGUsXG4gICAgICAgICAgICBub2RlXyA6IG5vZGVfLFxuICAgICAgICAgICAgcGF0aCA6IFtdLmNvbmNhdChwYXRoKSxcbiAgICAgICAgICAgIHBhcmVudCA6IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgIHBhcmVudHMgOiBwYXJlbnRzLFxuICAgICAgICAgICAga2V5IDogcGF0aC5zbGljZSgtMSlbMF0sXG4gICAgICAgICAgICBpc1Jvb3QgOiBwYXRoLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICAgIGxldmVsIDogcGF0aC5sZW5ndGgsXG4gICAgICAgICAgICBjaXJjdWxhciA6IG51bGwsXG4gICAgICAgICAgICB1cGRhdGUgOiBmdW5jdGlvbiAoeCwgc3RvcEhlcmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLmlzUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wYXJlbnQubm9kZVtzdGF0ZS5rZXldID0geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZSA9IHg7XG4gICAgICAgICAgICAgICAgaWYgKHN0b3BIZXJlKSBrZWVwR29pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZGVsZXRlJyA6IGZ1bmN0aW9uIChzdG9wSGVyZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5wYXJlbnQubm9kZVtzdGF0ZS5rZXldO1xuICAgICAgICAgICAgICAgIGlmIChzdG9wSGVyZSkga2VlcEdvaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlIDogZnVuY3Rpb24gKHN0b3BIZXJlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkoc3RhdGUucGFyZW50Lm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnBhcmVudC5ub2RlLnNwbGljZShzdGF0ZS5rZXksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLnBhcmVudC5ub2RlW3N0YXRlLmtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdG9wSGVyZSkga2VlcEdvaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2V5cyA6IG51bGwsXG4gICAgICAgICAgICBiZWZvcmUgOiBmdW5jdGlvbiAoZikgeyBtb2RpZmllcnMuYmVmb3JlID0gZiB9LFxuICAgICAgICAgICAgYWZ0ZXIgOiBmdW5jdGlvbiAoZikgeyBtb2RpZmllcnMuYWZ0ZXIgPSBmIH0sXG4gICAgICAgICAgICBwcmUgOiBmdW5jdGlvbiAoZikgeyBtb2RpZmllcnMucHJlID0gZiB9LFxuICAgICAgICAgICAgcG9zdCA6IGZ1bmN0aW9uIChmKSB7IG1vZGlmaWVycy5wb3N0ID0gZiB9LFxuICAgICAgICAgICAgc3RvcCA6IGZ1bmN0aW9uICgpIHsgYWxpdmUgPSBmYWxzZSB9LFxuICAgICAgICAgICAgYmxvY2sgOiBmdW5jdGlvbiAoKSB7IGtlZXBHb2luZyA9IGZhbHNlIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGlmICghYWxpdmUpIHJldHVybiBzdGF0ZTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS5ub2RlID09PSAnb2JqZWN0JyAmJiBzdGF0ZS5ub2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5rZXlzIHx8IHN0YXRlLm5vZGVfICE9PSBzdGF0ZS5ub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmtleXMgPSBvYmplY3RLZXlzKHN0YXRlLm5vZGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN0YXRlLmlzTGVhZiA9IHN0YXRlLmtleXMubGVuZ3RoID09IDA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRzW2ldLm5vZGVfID09PSBub2RlXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2lyY3VsYXIgPSBwYXJlbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYWYgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0YXRlLmtleXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzdGF0ZS5ub3RMZWFmID0gIXN0YXRlLmlzTGVhZjtcbiAgICAgICAgICAgIHN0YXRlLm5vdFJvb3QgPSAhc3RhdGUuaXNSb290O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gdXNlIHJldHVybiB2YWx1ZXMgdG8gdXBkYXRlIGlmIGRlZmluZWRcbiAgICAgICAgdmFyIHJldCA9IGNiLmNhbGwoc3RhdGUsIHN0YXRlLm5vZGUpO1xuICAgICAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQgJiYgc3RhdGUudXBkYXRlKSBzdGF0ZS51cGRhdGUocmV0KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChtb2RpZmllcnMuYmVmb3JlKSBtb2RpZmllcnMuYmVmb3JlLmNhbGwoc3RhdGUsIHN0YXRlLm5vZGUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFrZWVwR29pbmcpIHJldHVybiBzdGF0ZTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUubm9kZSA9PSAnb2JqZWN0J1xuICAgICAgICAmJiBzdGF0ZS5ub2RlICE9PSBudWxsICYmICFzdGF0ZS5jaXJjdWxhcikge1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yRWFjaChzdGF0ZS5rZXlzLCBmdW5jdGlvbiAoa2V5LCBpKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVycy5wcmUpIG1vZGlmaWVycy5wcmUuY2FsbChzdGF0ZSwgc3RhdGUubm9kZVtrZXldLCBrZXkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHdhbGtlcihzdGF0ZS5ub2RlW2tleV0pO1xuICAgICAgICAgICAgICAgIGlmIChpbW11dGFibGUgJiYgaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS5ub2RlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVba2V5XSA9IGNoaWxkLm5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNoaWxkLmlzTGFzdCA9IGkgPT0gc3RhdGUua2V5cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNoaWxkLmlzRmlyc3QgPSBpID09IDA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVycy5wb3N0KSBtb2RpZmllcnMucG9zdC5jYWxsKHN0YXRlLCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGFyZW50cy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG1vZGlmaWVycy5hZnRlcikgbW9kaWZpZXJzLmFmdGVyLmNhbGwoc3RhdGUsIHN0YXRlLm5vZGUpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0pKHJvb3QpLm5vZGU7XG59XG5cbmZ1bmN0aW9uIGNvcHkgKHNyYykge1xuICAgIGlmICh0eXBlb2Ygc3JjID09PSAnb2JqZWN0JyAmJiBzcmMgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGRzdDtcbiAgICAgICAgXG4gICAgICAgIGlmIChpc0FycmF5KHNyYykpIHtcbiAgICAgICAgICAgIGRzdCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRGF0ZShzcmMpKSB7XG4gICAgICAgICAgICBkc3QgPSBuZXcgRGF0ZShzcmMuZ2V0VGltZSA/IHNyYy5nZXRUaW1lKCkgOiBzcmMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVnRXhwKHNyYykpIHtcbiAgICAgICAgICAgIGRzdCA9IG5ldyBSZWdFeHAoc3JjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Vycm9yKHNyYykpIHtcbiAgICAgICAgICAgIGRzdCA9IHsgbWVzc2FnZTogc3JjLm1lc3NhZ2UgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Jvb2xlYW4oc3JjKSkge1xuICAgICAgICAgICAgZHN0ID0gbmV3IEJvb2xlYW4oc3JjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bWJlcihzcmMpKSB7XG4gICAgICAgICAgICBkc3QgPSBuZXcgTnVtYmVyKHNyYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdHJpbmcoc3JjKSkge1xuICAgICAgICAgICAgZHN0ID0gbmV3IFN0cmluZyhzcmMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKE9iamVjdC5jcmVhdGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgICBkc3QgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihzcmMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcmMuY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgZHN0ID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPVxuICAgICAgICAgICAgICAgIChzcmMuY29uc3RydWN0b3IgJiYgc3JjLmNvbnN0cnVjdG9yLnByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICB8fCBzcmMuX19wcm90b19fXG4gICAgICAgICAgICAgICAgfHwge31cbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHZhciBUID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICBULnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICAgICAgZHN0ID0gbmV3IFQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvckVhY2gob2JqZWN0S2V5cyhzcmMpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRzdDtcbiAgICB9XG4gICAgZWxzZSByZXR1cm4gc3JjO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iaikge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSByZXMucHVzaChrZXkpXG4gICAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIHRvUyAob2JqKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSB9XG5mdW5jdGlvbiBpc0RhdGUgKG9iaikgeyByZXR1cm4gdG9TKG9iaikgPT09ICdbb2JqZWN0IERhdGVdJyB9XG5mdW5jdGlvbiBpc1JlZ0V4cCAob2JqKSB7IHJldHVybiB0b1Mob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScgfVxuZnVuY3Rpb24gaXNFcnJvciAob2JqKSB7IHJldHVybiB0b1Mob2JqKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4gKG9iaikgeyByZXR1cm4gdG9TKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyB9XG5mdW5jdGlvbiBpc051bWJlciAob2JqKSB7IHJldHVybiB0b1Mob2JqKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgfVxuZnVuY3Rpb24gaXNTdHJpbmcgKG9iaikgeyByZXR1cm4gdG9TKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nIH1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkgKHhzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICBpZiAoeHMuZm9yRWFjaCkgcmV0dXJuIHhzLmZvckVhY2goZm4pXG4gICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuKHhzW2ldLCBpLCB4cyk7XG4gICAgfVxufTtcblxuZm9yRWFjaChvYmplY3RLZXlzKFRyYXZlcnNlLnByb3RvdHlwZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0cmF2ZXJzZVtrZXldID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgdmFyIHQgPSBuZXcgVHJhdmVyc2Uob2JqKTtcbiAgICAgICAgcmV0dXJuIHRba2V5XS5hcHBseSh0LCBhcmdzKTtcbiAgICB9O1xufSk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eSB8fCBmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG9iajtcbn07XG4iXSwibmFtZXMiOlsiRXh0ZW50IiwiYmJveCIsInRoaXMiLCJfYmJveCIsIkluZmluaXR5IiwiX3ZhbGlkIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImluY2x1ZGUiLCJsbCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJlcXVhbHMiLCJfIiwib3RoZXIiLCJjZW50ZXIiLCJ1bmlvbiIsImNvbnRhaW5zIiwiX2Zhc3RDb250YWlucyIsImxvbiIsImxhdCIsImludGVyc2VjdCIsIkZ1bmN0aW9uIiwiYm9keSIsInBvbHlnb24iLCJ0eXBlIiwiY29vcmRpbmF0ZXMiLCJsaXN0IiwiX2ZsYXR0ZW4iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJpdGVtIiwiY29uY2F0IiwicHVzaCIsImdlb2pzb25Ob3JtYWxpemUiLCJnZW9qc29uRmxhdHRlbiIsImZsYXR0ZW4iLCJub3JtYWxpemVkIiwiZmVhdHVyZXMiLCJmb3JFYWNoIiwiZmVhdHVyZSIsImdlb21ldHJ5IiwiZ2VvanNvbkNvb3JkcyIsInRyYXZlcnNlIiwiZXh0ZW50IiwiZ2VvanNvblR5cGVzQnlEYXRhQXR0cmlidXRlcyIsImdlb21ldHJpZXMiLCJkYXRhQXR0cmlidXRlcyIsIk9iamVjdCIsImtleXMiLCJnZXRFeHRlbnQiLCJleHQiLCJjb29yZHMiLCJpIiwiYmJveGlmeSIsIm1hcCIsInZhbHVlIiwic29tZSIsImF0dHJpYnV0ZSIsImluZGV4T2YiLCJ1cGRhdGUiLCJnaiIsInR5cGVzIiwicHJvcGVydGllcyIsIlBvaW50IiwiTXVsdGlQb2ludCIsIkxpbmVTdHJpbmciLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiRmVhdHVyZSIsIkZlYXR1cmVDb2xsZWN0aW9uIiwidGV4dENvbG9yIiwidGV4dEhhbG9Db2xvciIsImJhY2tncm91bmRDb2xvciIsInN0cm9rZUNvbG9yIiwiU2ltcGxlU3R5bGUiLCJqc29uIiwib3B0aW9ucyIsImNsdXN0ZXIiLCJoZWF0bWFwIiwiY2x1c3RlckNvbG9yIiwicG9seWdvbmFuZGxpbmVzIiwiZmlsdGVyIiwidG9Mb3dlckNhc2UiLCJwb2ludHMiLCJhZGRTb3VyY2UiLCJkYXRhIiwic2V0UG9seWdvbkdlb21ldHJpZXMiLCJzZXRMaW5lR2VvbWV0cmllcyIsImNsdXN0ZXJNYXhab29tIiwiY2x1c3RlclJhZGl1cyIsImFkZExheWVyIiwiaWQiLCJzb3VyY2UiLCJwYWludCIsImxheW91dCIsInNldFBvaW50R2VvbWV0cmllcyIsInNldENsdXN0ZXIiLCJjb250YWluZXIiLCJnZXRDb250YWluZXIiLCJkYXRhc2V0IiwibG5nIiwiYm91bmRzIiwiZ2VvanNvbkV4dGVudCIsImZpdEJvdW5kcyIsImR1cmF0aW9uIiwicGFkZGluZyIsInNldFBvcHVwIiwib24iLCJlIiwidHVyZkNlbnRlciIsImRlc2NyaXB0aW9uIiwibWFwbGlicmVnbCIsInNldExuZ0xhdCIsInNldEhUTUwiLCJzYW5pdGl6ZUh0bWwiLCJhZGRUbyIsImdldENhbnZhcyIsInN0eWxlIiwiY3Vyc29yIiwicXVlcnlSZW5kZXJlZEZlYXR1cmVzIiwicG9pbnQiLCJsYXllcnMiLCJjbHVzdGVySWQiLCJjbHVzdGVyX2lkIiwiZ2V0U291cmNlIiwiZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20iLCJlcnIiLCJ6b29tIiwiZWFzZVRvIiwidCIsInIiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJvYmoiLCJUcmF2ZXJzZSIsIndhbGsiLCJyb290IiwiY2IiLCJpbW11dGFibGUiLCJwYXRoIiwicGFyZW50cyIsImFsaXZlIiwid2Fsa2VyIiwibm9kZV8iLCJub2RlIiwiY29weSIsIm1vZGlmaWVycyIsImtlZXBHb2luZyIsInN0YXRlIiwicGFyZW50Iiwia2V5Iiwic2xpY2UiLCJpc1Jvb3QiLCJsZXZlbCIsImNpcmN1bGFyIiwieCIsInN0b3BIZXJlIiwicmVtb3ZlIiwic3BsaWNlIiwiYmVmb3JlIiwiZiIsImFmdGVyIiwicHJlIiwicG9zdCIsInN0b3AiLCJibG9jayIsInVwZGF0ZVN0YXRlIiwib2JqZWN0S2V5cyIsImlzTGVhZiIsIm5vdExlYWYiLCJub3RSb290IiwicmV0IiwiY2FsbCIsInVuZGVmaW5lZCIsImNoaWxkIiwiaGFzT3duUHJvcGVydHkiLCJpc0xhc3QiLCJpc0ZpcnN0IiwicG9wIiwic3JjIiwiZHN0IiwidG9TIiwiRGF0ZSIsImdldFRpbWUiLCJSZWdFeHAiLCJpc0Vycm9yIiwibWVzc2FnZSIsImlzQm9vbGVhbiIsIkJvb2xlYW4iLCJpc051bWJlciIsIk51bWJlciIsImlzU3RyaW5nIiwiU3RyaW5nIiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInByb3RvIiwiX19wcm90b19fIiwiVCIsImdldCIsInBzIiwiaGFzIiwic2V0IiwiaW5pdCIsInNraXAiLCJhcmd1bWVudHMiLCJwYXRocyIsIm5vZGVzIiwiY2xvbmUiLCJyZXMiLCJ0b1N0cmluZyIsInhzIiwiZm4iLCJhcmdzIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9